package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BookingRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingRequestAllPropertiesEquals(BookingRequest expected, BookingRequest actual) {
        assertBookingRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertBookingRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingRequestAllUpdatablePropertiesEquals(BookingRequest expected, BookingRequest actual) {
        assertBookingRequestUpdatableFieldsEquals(expected, actual);
        assertBookingRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingRequestAutoGeneratedPropertiesEquals(BookingRequest expected, BookingRequest actual) {
        assertThat(actual)
            .as("Verify BookingRequest auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingRequestUpdatableFieldsEquals(BookingRequest expected, BookingRequest actual) {
        assertThat(actual)
            .as("Verify BookingRequest relevant properties")
            .satisfies(a -> assertThat(a.getStartTime()).as("check startTime").isEqualTo(expected.getStartTime()))
            .satisfies(a -> assertThat(a.getEndTime()).as("check endTime").isEqualTo(expected.getEndTime()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getPurpose()).as("check purpose").isEqualTo(expected.getPurpose()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingRequestUpdatableRelationshipsEquals(BookingRequest expected, BookingRequest actual) {
        assertThat(actual)
            .as("Verify BookingRequest relationships")
            .satisfies(a -> assertThat(a.getInvitedUsers()).as("check invitedUsers").isEqualTo(expected.getInvitedUsers()))
            .satisfies(a -> assertThat(a.getEmployee()).as("check employee").isEqualTo(expected.getEmployee()))
            .satisfies(a -> assertThat(a.getMeetingRoom()).as("check meetingRoom").isEqualTo(expected.getMeetingRoom()));
    }
}
